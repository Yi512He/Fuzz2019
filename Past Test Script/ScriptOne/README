-----------------------------------------------------------------
Copyright (c) 1989 Lars Fredriksen, Bryan So, Barton Miller
All rights reserved
    
This software is furnished under the condition that it may not
be provided or otherwise made available to, or used by, any
other person.  No title to or ownership of the software is
hereby transferred.
  
Any use of this software must include the above copyright notice.
-----------------------------------------------------------------

IF YOU HAVE NOT READ THE "README" FILE IN THE PARENT DIRECTORY, PLEASE
DO THAT FIRST!

This directory contains a set of scripts and a set of test input. They
let you reproduce the results we get.

The files t1 .. t12 are random input streams for ordinary programs.

The files makefuzz, executable, run* are csh scripts that control
the testing. Except for executable, which is a simple utility
script, each of them is described below.

------------------------------------------------------------------------


	Instructions for how to use the scripts in this directory:


Initialization:
	
	The script, makefuzz, is used to create random input streams.
	Run makefuzz to create the input files for the various test cases.
	This has been done already to generate the files t*.


Testing:
	
	By typing "run", ALL the tests defined in run.master will be executed, 
	and the results stored in a file called "notes". Currently, only the 
	message, "core dumped", will be recorded for crashed programs, in a
	later release, the error message will also be noted.
	
	If a program under test seems to be in an infinite loop, the current
	test can be aborted by hitting ^C, and an appropriate notice is put in 
	the output file.  This will NOT abort the script -- only the current
	program under test.

	If only some of the programs need to be tested, use run.select as
	follows:

		run.select program1 program2 ...

	"Run" will execute run.stdin, run.file, run.cp or run.pty depending on
	the definition in run.master.  These are discussed below.


Adding programs to these test cases:

	To do this you have to edit the run.master script file. 
	
	First find out how the program reads its input. 
	
     -	If it reads input from stdin, put the following line in the run.master 
	file:
	
		run.stdin programname [parameters]


     -	If the program takes its input from a file, put the following line in 
	the run.master file:

		run.file programname [parameters]

        A test file will then be supplied as the last argument.
	For program like diff, that compares files, one of the test files are
	also given as a parameter to the program.


     -	If the program only takes its input from a file with a special name 
	put the following line in the run.master file:

		run.cp [-] filename programname [parameters]

        This will cause the script to copy a test file to filename before
	executing the program. The filename will be given as the last
	parameter unless a '-' is given.


	"Run.master" contains lots of examples.
